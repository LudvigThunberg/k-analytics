// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model UserData {
  id                    String                    @id @default(uuid())
  username              String
  properties            PropertySummaries[]
  testData              TestData[]
  accessToken           String                    @db.Text
  refreshToken          String
  expiresIn             String
  googleId              String                    @unique

}

model PropertySummaries {
  id                    String                    @id @default(uuid())
  property              String
  displayName           String
  user                  UserData                  @relation(fields: [userId], references: [id])
  userId                String
}

model TestData {
  id                    String                    @id @default(uuid())
  dimensionHeaders      DimensionHeaders[]
  metricHeaders         MetricHeaders[]
  rows                  Rows[]
  user                  UserData                  @relation(fields: [userId], references: [id])
  userId                String
}

model DimensionHeaders {
  id                    String                    @id @default(uuid())
  dimensionHeadersValue DimensionHeadersValue[]
  testData              TestData                  @relation(fields: [testDataId], references: [id])
  testDataId            String
}

model DimensionHeadersValue {
  id                    String                    @id @default(uuid())
  name                  String?
  dimensionHeaders      DimensionHeaders          @relation(fields: [dimensionHeadersId], references: [id])
  dimensionHeadersId    String 
}

model MetricHeaders {
  id                    String                    @id @default(uuid())
  metricHeadersValue    MetricHeadersValue[]
  testData              TestData                  @relation(fields: [testDataId], references: [id])
  testDataId            String
}

model MetricHeadersValue {
  id                    String                    @id @default(uuid())
  name                  String?
  type                  String?
  metricHeaders         MetricHeaders             @relation(fields: [metricHeadersId], references: [id])
  metricHeadersId       String 
}

model Rows {
  id                    String                    @id @default(uuid())
  data                  Data[]
  testData              TestData                  @relation(fields: [testDataId], references: [id])
  testDataId            String
}

model Data {
  id                    String                    @id @default(uuid())
  metricValues          MetricValues[]
  dimensionValues       DimensionValues[]
  rows                  Rows                      @relation(fields: [rowsId], references: [id])
  rowsId                String
}

model DimensionValues {
  id                    String                    @id @default(uuid())
  value                 String?
  data                  Data                      @relation(fields: [dataId], references: [id])
  dataId                String
}

model MetricValues {
  id                    String                    @id @default(uuid())
  value                 String?
  data                  Data                      @relation(fields: [dataId], references: [id])
  dataId                String
}